{"version":3,"sources":["components/percentage/percentage.js","App.js","reportWebVitals.js","index.js"],"names":["percentageHandler","amount","percentage","isNaN","negativePercentage","Number","positivePercentage","getCurrencyHandler","a","axios","get","currencyFetch","data","console","log","message","PercentageDisplay","props","useState","setAmount","setPercentage","result","setResult","useEffect","JsonCurrency","currency","setCurrency","currencyName","setCurrencyName","fetchData","Container","fluid","Card","className","Col","xs","id","Form","Row","md","Group","controlId","Label","Control","type","value","onChange","event","target","Dropdown","Toggle","variant","Menu","map","item","Item","onClick","symbol","quote","USD","price","href","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.244caecd.chunk.js","sourcesContent":["import './percentage.css'\r\nimport React from 'react';\r\nimport {useEffect, useState} from 'react';\r\nimport axios from 'axios';\r\nimport {Dropdown, Container, Row, Col, Form, Card} from 'react-bootstrap'\r\nimport JsonCurrency from './currency.json'  \r\n\r\n\r\n\r\n\r\nconst percentageHandler = (amount, percentage) => {\r\n\r\n    if(isNaN(amount) || isNaN(percentage))\r\n        return \"Percentage can only work with numbers\" ;\r\n    amount = Number(amount);\r\n    percentage = Number(percentage)\r\n    const negativePercentage = (amount - (amount * percentage) / 100) ;\r\n    const positivePercentage = (amount + (amount * percentage) / 100) ;\r\n\r\n    const value = {negativePercentage, positivePercentage}\r\n    return value;\r\n}\r\n\r\n\r\n    \r\nconst getCurrencyHandler = async () =>{\r\n\r\n    try{\r\n        const currencyFetch = await axios.get('https://pacific-basin-11511.herokuapp.com/allcurrency');\r\n        if(currencyFetch.data.data.data){\r\n            return currencyFetch.data.data.data;\r\n        }\r\n        return currencyFetch.data;\r\n    }\r\n    catch(error){\r\n        console.log(error.message, 'error')\r\n        return {data: ''}\r\n    }   \r\n}\r\n\r\n \r\nconst PercentageDisplay = (props)=>{\r\n\r\n    const [amount, setAmount] = useState(100)\r\n    const [percentage, setPercentage] = useState(10)\r\n    let [result, setResult] = useState(percentageHandler(amount, percentage))\r\n   \r\n    useEffect(()=>{\r\n        setResult(percentageHandler(amount, percentage))\r\n    }, [amount, percentage])\r\n\r\n\r\n\r\n    const [currency, setCurrency] = useState(JsonCurrency.data);\r\n    const [currencyValue, setCurrencyValue] = useState(null)\r\n    const [currencyName, setCurrencyName] = useState('Currency')\r\n\r\n\r\n    useEffect( ()=>{\r\n        const fetchData = async ()=>{\r\n            const data =  await getCurrencyHandler();\r\n            console.log(data)\r\n            if(!data.data && typeof(data.data) === 'string'){ // This will serve Old price\r\n                setCurrency(JsonCurrency.data)\r\n            }\r\n            else{ // This will serve new price\r\n                setCurrency(data);\r\n            }         \r\n        } \r\n      \r\n        fetchData()\r\n        \r\n    }, [currencyName])\r\n\r\n\r\n    return(\r\n    <Container fluid>\r\n\r\n             <Card className = 'p-1 mb-3 '> \r\n                 <Col xs = {12}   >\r\n                 <Card className = 'p-1 mb-1' > CRYPTO CURRENCY PERCENTAGE CALCULATOR</Card>\r\n                </Col>\r\n\r\n                <Col xs= {12}>\r\n                     <div id ='result' > - {result.negativePercentage} {'<<<<'} and  {'>>>>'} + {result.positivePercentage}  </div>\r\n                </Col>\r\n            </Card>\r\n\r\n         <Form>\r\n            <Row>\r\n                <Col xs = {12} md ={6}>\r\n                <Form.Group className = 'mb-3' xs = {2} controlId = 'formAmount'> \r\n                        <Form.Label> $ </Form.Label>\r\n                        <Form.Control type = 'text' value = {amount} onChange = {(event)=>setAmount(event.target.value) }/>     \r\n                </Form.Group>\r\n                </Col>\r\n\r\n                <Col xs = {12} md = {6}>\r\n                <Form.Group className = 'mb-3' xs = {2} controlId = 'formPercentage'> \r\n                        <Form.Label> % </Form.Label>\r\n                        <Form.Control  type = 'text' value = {percentage} onChange = {(event)=>setPercentage(event.target.value) }/>     \r\n                </Form.Group>\r\n                </Col>\r\n\r\n                <Col xs = {12} >\r\n                    <p> Select your Currency </p>\r\n                     <Dropdown>\r\n                <Dropdown.Toggle variant=\"success\" id=\"dropdown-basic\">\r\n                   {currencyName}\r\n                </Dropdown.Toggle>\r\n\r\n                <Dropdown.Menu >\r\n                { \r\n                \r\n                    typeof(currency) === 'object' ? \r\n                    currency.map((item) =>{\r\n                    return <Dropdown.Item\r\n                      key ={item.id} onClick = {()=> {setCurrencyName(item.symbol); setAmount(item.quote.USD.price)} }\r\n                      href=\"#\"> \r\n                      {item.symbol}\r\n                      </Dropdown.Item>\r\n                }) : null}\r\n                </Dropdown.Menu>\r\n                     </Dropdown>\r\n                    \r\n                </Col>\r\n           </Row>\r\n       </Form>\r\n\r\n    </Container>\r\n    )\r\n}\r\n\r\n\r\nexport default PercentageDisplay\r\n","\nimport './App.css';\nimport PercentageDisplay from './components/percentage/percentage';\nimport {Container, Row, Col} from 'react-bootstrap'\n\nfunction App() {\n  return (\n    <Container fluid>\n\n    \n    <div className=\"App\">\n    <Row>\n      <Col xs = {12}>\n        <PercentageDisplay  />\n      </Col>\n    </Row>\n    </div>\n \n    </Container>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}